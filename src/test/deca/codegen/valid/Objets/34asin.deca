class math {

    float PI = 3.141592653589793f;
    float SQRT2 = 0.70710678118f;
    float TWO_27 = 0x1.0p27; // Long bits 0x41a0000000000000L.
    float TWO_66 = 0x1.0p66;
    float TWO_29 = 0x1.0p29;
    float TWO_23 = 0x1.0p23;
    float PS0 = 0.16666666666666666f; // Long bits 0x3fc5555555555555L.
    float PS1 = -0.3255658186224009f;// Long bits 0xbfd4d61203eb6f7dL.
    float PS2 = 0.20121253213486293f;// Long bits 0x3fc9c1550e884455L.
    float PS3 = -0.04005553450067941f;// Long bits 0xbfa48228b5688f3bL.
    float PS4 = 7.915349942898145e-4f; // Long bits 0x3f49efe07501b288L.
    float PS5 = 3.479331075960212e-5f; // Long bits 0x3f023de10dfdf709L.
    float QS1 = -2.403394911734414f;// Long bits 0xc0033a271c8a2d4bL.
    float QS2 = 2.0209457602335057f;// Long bits 0x40002ae59c598ac8L.
    float QS3 = -0.6882839716054533f; // Long bits 0xbfe6066c1b8d0159L.
    float QS4 = 0.07703815055590194f; // Long bits 0x3fb3b8c5b12e9282L.
    float PI_L = 1.2246467991473532e-16f; // Long bits 0x3ca1a62633145c07L.
    float PIO2_1 = 1.5707963267341256f; // Long bits 0x3ff921fb54400000L.
    float PIO2_1L = 6.077100506506192e-11f; // Long bits 0x3dd0b4611a626331L.
    float PIO2_2 = 6.077100506303966e-11f; // Long bits 0x3dd0b4611a600000L.
    float PIO2_2L = 2.0222662487959506e-21f; // Long bits 0x3ba3198a2e037073L.
    float PIO2_3 = 2.0222662487111665e-21f; // Long bits 0x3ba3198a2e000000L.
    float PIO2_3L = 8.4784276603689e-32f; // Long bits 0x397b839a252049c1L.
    float ATAN_0_5H = 0.4636476090008061f; // Long bits 0x3fddac670561bb4fL.
    float ATAN_0_5L = 2.2698777452961687e-17f; // Long bits 0x3c7a2b7f222f65e2L.
    float ATAN_1_5H = 0.982793723247329f; // Long bits 0x3fef730bd281f69bL.
    float ATAN_1_5L = 1.3903311031230998e-17f; // Long bits 0x3c7007887af0cbbdL.
    float AT0 = 0.3333333333333293f; // Long bits 0x3fd555555555550dL.
    float AT1 = -0.19999999999876483f; // Long bits 0xbfc999999998ebc4L.
    float AT2 = 0.14285714272503466f; // Long bits 0x3fc24924920083ffL.
    float AT3 = -0.11111110405462356f; // Long bits 0xbfbc71c6fe231671L.
    float AT4 = 0.09090887133436507f; // Long bits 0x3fb745cdc54c206eL.
    float AT5 = -0.0769187620504483f; // Long bits 0xbfb3b0f2af749a6dL.
    float AT6 = 0.06661073137387531f; // Long bits 0x3fb10d66a0d03d51L.
    float AT7 = -0.058335701337905735f; // Long bits 0xbfadde2d52defd9aL.
    float AT8 = 0.049768779946159324f; // Long bits 0x3fa97b4b24760debL.
    float AT9 = -0.036531572744216916f; // Long bits 0xbfa2b4442c6a6c2fL.
    float AT10 = 0.016285820115365782f; // Long bits 0x3f90ad3ae322da11L.

    float approx_sqrt(float value){ // this is the cause of bad precision
        /*
         * To justify the following code; prove that
         *
         * ((((val.i / 2^m) - b) / 2) + b) * 2^m = ((val.i - 2^m) / 2) + ((b + 1) / 2) * 2^m)
         *
         * where
         *
         * b = exponent bias
         * m = number of mantissa bits
         */

        int bits =0;// convertToIEEE754(x);
        bits = bits - (int)(0x1.0p23);
        bits = bits/2;		
        bits = bits + (int)(TWO_29);
        return 0.0f; //convertFromIEEE754(bits);
    }

    float asin(float x)
    {
        boolean negative = x < 0;
        float t = x * x;
        float p = t * (PS0 + t * (PS1 + t * (PS2 + t * (PS3 + t * (PS4 + t * PS5)))));
        float q = 1 + t * (QS1 + t * (QS2 + t * (QS3 + t * QS4)));
        float w = 1 - x; // 1>|x|>=0.5.
        float s;
        float c;

        if (negative){ x = -x;}
        //if (! (x <= 1)) return ;
        if (x == 1){ 
            if (negative) {return -PI/2;}
            else { return PI / 2;}
        }

        if (x < 0.5)
        {
            if (x < 1 / TWO_27){ 
                if(negative) {return -x;}
                else {return x;}
            }
            if (negative) {return -x - x * (p / q) ;}
            else {return x + x * (p / q);}
        }

        
        t = w * 0.5f;
        p = t * (PS0 + t * (PS1 + t * (PS2 + t * (PS3 + t * (PS4 + t * PS5)))));
        q = 1 + t * (QS1 + t * (QS2 + t * (QS3 + t * QS4)));

        s = this.approx_sqrt(t);
        if (x >= 0.975)
        {
            w = p / q;
            t = PI / 2 - (2 * (s + s * w) - PI_L / 2);
        }
        else
        {
            w = (float)(s);
            c = (t - w * w) / (s + w);
            p = 2 * s * (p / q) - (PI_L / 2 - 2 * c);
            q = PI / 4 - 2 * w;
            t = PI / 4 - (p - q);
        }
        if(negative){ return -t; }
        return t;
    }
}

{

}
