// Grenoble INP - Ensimag projet GL -*- mode: java -*-
// Library for class Math of Deca, coded in Deca

class Math {
    float PI = 3.141592653589793; //totally stolen from JAVA
    protected float  SQRT2 = 0.70710678118; // sqrt(2)/2

    protected float  TWO_24 = 0x1.0p24;
    protected float  TWO_27 = 0x1.0p27; // Long bits 0x41a0000000000000L.
    protected float  TWO_66 = 7.378697629483821e19;
    protected float  TWO_29 = 0x1.0p29;

    protected int  TWO_9_int = 512;
    protected int  TWO_31_int = 2147483647; //(0x1.0p31);
    protected int  TWO_23_int = 8388608;//(int)(0x1.0p23)
    protected int  TWO_24_int = 16777216;//(0x1.0p24)
    protected int  TWO_29_int = 536870912;

    protected float  S1 = -0.16666666666666632; // Long bits 0xbfc5555555555549L.
    protected float  S2 = 8.33333333332249e-3; // Long bits 0x3f8111111110f8a6L.
    protected float  S3 = -1.984126982985795e-4; // Long bits 0xbf2a01a019c161d5L.
    protected float  S4 = 2.7557313707070068e-6; // Long bits 0x3ec71de357b1fe7dL.
    protected float  S5 = -2.5050760253406863e-8; // Long bits 0xbe5ae5e68a2b9cebL.
    protected float  S6 = 1.58969099521155e-10; // Long bits 0x3de5d93a5acfd57cL.

    protected float  C1 = 0.0416666666666666; // Long bits 0x3fa555555555554cL.
    protected float  C2 = -1.388888888887411e-3; // Long bits 0xbf56c16c16c15177L.
    protected float  C3 = 2.480158728947673e-5; // Long bits 0x3efa01a019cb1590L.
    protected float  C4 = -2.7557314351390663e-7; // Long bits 0xbe927e4f809c52adL.
    protected float  C5 = 2.087572321298175e-9; // Long bits 0x3e21ee9ebdb4b1c4L.
    protected float  C6 = -1.1359647557788195e-11; // Long bits 0xbda8fae9be8838d4L.
    
    protected float  PS0 = 0.16666666666666666; // Long bits 0x3fc5555555555555L.
    protected float  PS1 = -0.3255658186224009;// Long bits 0xbfd4d61203eb6f7dL.
    protected float  PS2 = 0.20121253213486293;// Long bits 0x3fc9c1550e884455L.
    protected float  PS3 = -0.04005553450067941;// Long bits 0xbfa48228b5688f3bL.
    protected float  PS4 = 7.915349942898145e-4; // Long bits 0x3f49efe07501b288L.
    protected float  PS5 = 3.479331075960212e-5; // Long bits 0x3f023de10dfdf709L.

    protected float  QS1 = -2.403394911734414;// Long bits 0xc0033a271c8a2d4bL.
    protected float  QS2 = 2.0209457602335057;// Long bits 0x40002ae59c598ac8L.
    protected float  QS3 = -0.6882839716054533; // Long bits 0xbfe6066c1b8d0159L.
    protected float  QS4 = 0.07703815055590194; // Long bits 0x3fb3b8c5b12e9282L.

    protected float  PI_L = 1.2246467991473532e-16; // Long bits 0x3ca1a62633145c07L.
    protected float  PIO2_1 = 1.5707963267341256; // Long bits 0x3ff921fb54400000L.
    protected float  PIO2_1L = 6.077100506506192e-11; // Long bits 0x3dd0b4611a626331L.
    protected float  PIO2_2 = 6.077100506303966e-11; // Long bits 0x3dd0b4611a600000L.
    protected float  PIO2_2L = 2.0222662487959506e-21; // Long bits 0x3ba3198a2e037073L.
    protected float  PIO2_3 = 2.0222662487111665e-21; // Long bits 0x3ba3198a2e000000L.
    protected float  PIO2_3L = 8.4784276603689e-32; // Long bits 0x397b839a252049c1L.

    protected float  ATAN_0_5H = 0.4636476090008061; // Long bits 0x3fddac670561bb4fL.
    protected float  ATAN_0_5L = 2.2698777452961687e-17; // Long bits 0x3c7a2b7f222f65e2L.
    protected float  ATAN_1_5H = 0.982793723247329; // Long bits 0x3fef730bd281f69bL.
    protected float  ATAN_1_5L = 1.3903311031230998e-17; // Long bits 0x3c7007887af0cbbdL.
    
    protected float  AT0 = 0.3333333333333293; // Long bits 0x3fd555555555550dL.
    protected float  AT1 = -0.19999999999876483; // Long bits 0xbfc999999998ebc4L.
    protected float  AT2 = 0.14285714272503466; // Long bits 0x3fc24924920083ffL.
    protected float  AT3 = -0.11111110405462356; // Long bits 0xbfbc71c6fe231671L.
    protected float  AT4 = 0.09090887133436507; // Long bits 0x3fb745cdc54c206eL.
    protected float  AT5 = -0.0769187620504483; // Long bits 0xbfb3b0f2af749a6dL.
    protected float  AT6 = 0.06661073137387531; // Long bits 0x3fb10d66a0d03d51L.
    protected float  AT7 = -0.058335701337905735; // Long bits 0xbfadde2d52defd9aL.
    protected float  AT8 = 0.049768779946159324; // Long bits 0x3fa97b4b24760debL.
    protected float  AT9 = -0.036531572744216916; // Long bits 0xbfa2b4442c6a6c2fL.
    protected float  AT10 = 0.016285820115365782; // Long bits 0x3f90ad3ae322da11L.

    void ErrorNaN() asm("WSTR \"Error NaN value\"
    WNL
	ERROR");

    float abs(float x){
        if (x<0){ 
            return -x;
        }
        return x; 
    }

    float _pow(float x, int n) {
        int i = 0;
        float res = 1;
        if (n < 0) {
            while (i > n) {
                res = res / x;
                i = i - 1;
            }
        } else {
            while(i < n) {
                res = res * x;
                i = i + 1;
            }
        }
        return res;
    }

    int _shr_1(int x) 
        asm("
        LOAD -3(LB), R0
        SHR R0 
        RTS
        ");

    int _shr (int x, int n){
        int i = 0;
        int y = x ;
        while(i<n){
            y = _shr_1(y);
            i = i+1;
        }
        return y;
    }

    int _shl_1(int x) 
        asm("
        LOAD -3(LB), R0
        SHL R0 
        RTS
        ");

    int _shl (int x, int n){
        int i = 0;
        int y = x ;
        while(i<n){
            y = _shl_1(y);
            i = i+1;
        }
        return y;
    }

    float _fma(float a, float b, float c)
        asm("
        LOAD -3(LB), R0
        LOAD -5(LB), R1
        FMA -4(LB), R0
        RTS
        ");

    int _convertToIEEE754(float value) {
        /*
        * This convert a float to it IEEE754 int 
        * It doesn't handle special cases (Infinity, NaN)
        */
        
        int bits = 0;
        int significand;
        int exponent = 0;

        // Extracting the sign bit
        if (value < 0) {
            bits = bits + TWO_31_int;
            value = -value;
        }
        // Handling special cases: positive/negative infinity and NaN
        if (value == 0) { return 0; }

        // Extracting the exponent and significand bits
        while (value >= 2.0f) {
            value = value / 2.0f;
            exponent = exponent +1;
        }
        while (value < 1.0f) {
            value = value * 2.0f;
            exponent = exponent -1;
        }

        exponent = exponent + 127;  // Bias for single-precision float
        
        significand = (int) ((value - 1.0f) * TWO_23_int);
        bits = bits + (exponent * TWO_23_int) + significand;
        
        return bits;
    }

    float _convertFromIEEE754(int bits) {

        int sign = bits / TWO_31_int;  // Extracting the sign bit
        int exponent = (bits / TWO_23_int) ; // &FF
        int significand = (bits * TWO_9_int) / TWO_9_int; // bits & 0x7FFFFF
        int significandBits;
        int biasedExponent; 
        float value;
        
        // Constructing the significand value
        if (exponent != 0) {
            significandBits = significand + TWO_23_int;  // Normalized number
        } else {
            significandBits = significand;  
            exponent = 1 - 127;  
        }

        biasedExponent = exponent - 127;
        
        // Calculating the actual value
        value = (float) (significandBits) * _pow(2, biasedExponent - 23);
        
        if (sign == 0){ return value ; }
        else {return -value; }
    }

    float ulp(float value){ //Totally stolen form java
        float res;
        float pow;
        float x = abs(value);

        int bits = _convertToIEEE754(x);
        // extract exponent
        int exponent = (bits / TWO_23_int ) - 127;

        // NaN or Infinity
        if (exponent == 128) {
            println("The value is infinite or NaN");
           ErrorNaN(); 
        } 
        
        // 0 or subnormal
        else if (exponent == -126 - 1) {
            // minimum value of a float
            res = 0x0.1p-145f;
        }

        else {
            exponent = exponent - (24 - 1);
            if (exponent >= -126) {
                res = _convertFromIEEE754( (exponent + 127) * TWO_23_int  );
            } else {
                pow = _pow(2, exponent+149);
                res = _convertFromIEEE754((int)(pow));
            }
        }

        if (value <0) {return -res;}
        return res;

    }

    float _approx_sqrt(float x){//from a C implementation Wikipedia
        int bits = _convertToIEEE754(x);	/* Convert type; preserving bit pattern */
        if (x<0){
            println("You can't get the root of a negative value");
            ErrorNaN();
        }
        /*
         * To justify the following code; prove that
         *
         * ((((val.i / 2^m) - b) / 2) + b) * 2^m = ((val.i - 2^m) / 2) + ((b + 1) / 2) * 2^m)
         *
         * where
         *
         * b = exponent bias
         * m = number of mantissa bits
         */
        bits = bits - TWO_23_int;
        bits = bits/2;		
        bits = bits + TWO_29_int;
        
        return _convertFromIEEE754(bits);		/* Interpret again as float */
    }

    float _cos(float value) //Totally stolen from java 
    {
        float x = abs(value);

        float z = x * x;
        float r = z * (C1 + z * (C2 + z * (C3 + z * (C4 + z * (C5 + z * C6)))));
        
        float qx ;
        if (x > 0.78125f) {
            qx = 0.28125f;
        }else {
            qx = (x * 0.25f);
        }

        if (x < 1 / TWO_27){
            return 1; 
        } // If |x| ~< 2**-27; already know answer.

        if (x < 0.3f){
            return 1 - (0.5f * z - (z * r ));
        }

        return 1 - qx - ((0.5f * z - qx) - (z * r ));
    }

    float _sin(float value) //Totally stolen from java 
    {
        float x = abs(value);
        float res = x;
        float z = x * x;
        float v = z * x;
        float r = S2 + z * (S3 + z * (S4 + z * (S5 + z * S6)));

        if (abs(x) > 1 / TWO_24){ // If |x| ~< 2**-27; already know answer.
            res = x + v * (S1 + z * r);
        }
        if(value <0){ 
            return -res; 
        }
        return res;
    }

    float sin(float value){
        int q = (int)(2.0 * value / PI);
        float x = (float)(2*q + 1)*PI/4.0 - value; // x in [-PI/4; PI/4]
        int sisign = q%2;
        int cosign = (q+1)%2;
        if ( abs(value) <= PI/4 ){
            return _sin(value);
        }
        else {
            if (q%4 == 3) {sisign = -sisign;}
            if (q%4 == 2) {cosign = -cosign;} 

            return ( (float)(sisign + cosign)*_cos(x) + 
                (float)(sisign-cosign)*_sin(x) ) * SQRT2 ;
        }
    }

    float cos(float value){

        int q = (int)(2.0*value/PI);
        float x = (float)(2*q + 1)*PI/4.0 - value; // x in [-PI/4; PI/4]
        int sisign = q%2;
        int cosign = (q+1)%2;

        if ( abs(value)<= PI/4.0 ){ return _cos(value);}
        else {

            if (q%4 == 3) {sisign = -sisign;}
            if (q%4 == 2) {cosign = -cosign;}

            return ( (float)(cosign-sisign)*_cos(x) + 
            (float)(cosign+sisign)*_sin(x) ) * SQRT2 ;
        }
    }

    float atan(float x) //Totally stolen from java
    {
        float lo;
        float hi;
        boolean negative = (x < 0);

        float z; 
        float w; 
        float s1; 
        float s2; 

        if (negative){ x = -x;}
        if (x >= TWO_66){ 
            if (negative) {return -PI / 2;}
            else {return PI / 2;}
        }

        if (! (x >= 0.4375)) // |x|<7/16; or NaN.
        {
            if (! (x >= 1 / TWO_29)) { // Small; or NaN.
                if (negative){ return -x ;}
                else{ return x;}
            }
            lo = hi = 0;
        }
        else if (x < 1.1875)
        {
            if (x < 0.6875) // 7/16<=|x|<11/16.
            {
                x = (2 * x - 1) / (2 + x);
                hi = ATAN_0_5H;
                lo = ATAN_0_5L;
            }
            else // 11/16<=|x|<19/16.
            {
                x = (x - 1) / (x + 1);
                hi = PI / 4;
                lo = PI_L / 4;
            }
        }
        else if (x < 2.4375) // 19/16<=|x|<39/16.
        {
            x = (x - 1.5f) / (1 + 1.5f * x);
            hi = ATAN_1_5H;
            lo = ATAN_1_5L;
        }
        else // 39/16<=|x|<2**66.
        {
        x = -1 / x;
        hi = PI / 2;
        lo = PI_L / 2;
        }
        
        z = x * x;
        w = z * z;
        s1 = z * (AT0 + w * (AT2 + w * (AT4 + w * (AT6 + w * (AT8 + w * AT10)))));
        s2 = w * (AT1 + w * (AT3 + w * (AT5 + w * (AT7 + w * AT9))));
        
        
        if (hi == 0){ 
            if (negative) {return x * (s1 + s2) - x;}
            else { return x - x * (s1 + s2);}
        }
        
        z = hi - ((x * (s1 + s2) - lo) - x);
        
        if(negative) {return -z;}
        return z;
    }

    float asin(float value) //Totally stolen from java
    {
        float t; 
        float p; 
        float q; 
        float w; 
        float s;
        float c;

        float x = abs(value);
        if (!(x<=1)){
            println("arcsin is defined between [-1,1]");
            ErrorNaN();
        }

        if (x == 1){ 
            if (value < 0) {return -PI/2;}
            else { return PI / 2;}
        }

        if (x < 0.5)
        {
            if (x <= 1 / TWO_24){ 
                if(value < 0) {return -x;}
                else {return x;}
            }
            t = x * x;
            p = t * (PS0 + t * (PS1 + t * (PS2 + t * (PS3 + t * (PS4 + t * PS5)))));
            q = 1 + t * (QS1 + t * (QS2 + t * (QS3 + t * QS4)));
            if (value < 0) {return -x - x * (p / q) ;}
            else {return x + x * (p / q);}
        }

        w = 1 - x;
        t = w * 0.5f;
        p = t * (PS0 + t * (PS1 + t * (PS2 + t * (PS3 + t * (PS4 + t * PS5)))));
        q = 1 + t * (QS1 + t * (QS2 + t * (QS3 + t * QS4)));

        s = _approx_sqrt(t);
        if (x >= 0.975)
        {
            w = p / q;
            t = PI / 2 - (2 * (s + s * w) - PI_L / 2);
        }
        else
        {
            w = (float)(s);
            c = (t - w * w) / (s + w);
            p = 2 * s * (p / q) - (PI_L / 2 - 2 * c);
            q = PI / 4 - 2 * w;
            t = PI / 4 - (p - q);
        }
        if(value < 0){ return -t; }
        return t;
    }

}

// End of Deca Math library
